# 913. Cat and Mouse

'''
'''

from functools import cache
from typing import List


class Solution:
    def catMouseGame_1(self, graph: List[List[int]]) -> int:
        # 状态定义：(mouse_pos, cat_pos, turns)
        # 返回值：0=平局，1=老鼠赢，2=猫赢
        @cache
        def dp(mouse_pos: int, cat_pos: int, turns: int) -> int:
            # 如果回合数超过 2n * n，必然是平局
            if turns >= 2 * len(graph) * len(graph):
                return 0
            
            # 当前玩家
            mouse_turn = (turns % 2 == 0)
            
            # 老鼠到达洞
            if mouse_pos == 0:
                return 1
            # 猫抓到老鼠
            if cat_pos == mouse_pos:
                return 2
            
            # 老鼠回合
            if mouse_turn:
                draw = False
                # 遍历老鼠所有可能的移动
                for next_mouse in graph[mouse_pos]:
                    result = dp(next_mouse, cat_pos, turns + 1)
                    # 找到必胜策略
                    if result == 1:
                        return 1
                    # 记录是否有平局可能
                    if result == 0:
                        draw = True
                # 如果有平局可能就平局，否则就输
                return 0 if draw else 2
            
            # 猫回合
            else:
                draw = False
                # 遍历猫所有可能的移动（除了洞）
                for next_cat in graph[cat_pos]:
                    if next_cat == 0:
                        continue
                    result = dp(mouse_pos, next_cat, turns + 1)
                    # 找到必胜策略
                    if result == 2:
                        return 2
                    # 记录是否有平局可能
                    if result == 0:
                        draw = True
                # 如果有平局可能就平局，否则就输
                return 0 if draw else 1
        
        # 初始状态：老鼠在1，猫在2，回合数0（老鼠先手）
        return dp(1, 2, 0)


    def catMouseGame(self, graph: List[List[int]]) -> int:
        n = len(graph)
        @cache
        def dp(mouse_pos: int, cat_pos: int, turns: int) -> int:
            # 优化1：先判断终止条件
            if mouse_pos == 0:
                return 1
            if cat_pos == mouse_pos:
                return 2
            # 优化2：增加回合数限制
            if turns >= 2 * n * n:  # 修改回合数限制
                return 0
            
            mouse_turn = (turns % 2 == 0)
            
            # 老鼠回合
            if mouse_turn:
                has_draw = False
                # 遍历所有可能的移动
                for next_mouse in graph[mouse_pos]:
                    result = dp(next_mouse, cat_pos, turns + 1)
                    if result == 1:  # 找到必胜
                        return 1
                    if result == 0:  # 记录平局可能
                        has_draw = True
                # 如果没有必胜，但有平局
                return 0 if has_draw else 2
            # 猫回合
            else:
                has_draw = False
                # 遍历所有可能的移动
                for next_cat in graph[cat_pos]:
                    if next_cat == 0:  # 猫不能进洞
                        continue
                    result = dp(mouse_pos, next_cat, turns + 1)
                    if result == 2:  # 找到必胜
                        return 2
                    if result == 0:  # 记录平局可能
                        has_draw = True
                # 如果没有必胜，但有平局
                return 0 if has_draw else 1
        
        return dp(1, 2, 0)
    
    
if __name__ == "__main__":
    solution = Solution()
    graph = [[2,3,6,10,13,15,16,23,25,26,29,31,35,37,39,40,42,44,45,47,48,49],[2,5,7,11,12,17,19,21,22,25,29,32,33,36,37,40,47],[0,1,3,4,10,13,15,16,18,24,27,28,29,30,33,34,35,36,37,39,40,42,43,45,47,48],[0,2,7,9,10,20,21,23,24,27,28,29,34,35,39,42,43,46,47,48,49],[2,5,8,10,13,14,15,18,19,20,22,31,33,34,36,42,46,48,49],[1,4,9,10,12,18,19,21,22,24,25,28,29,30,32,33,34,35,36,42,43,48],[0,8,10,11,16,17,19,24,25,26,27,30,31,32,37,39,40,42],[1,3,8,9,10,11,12,13,15,27,33,38,42,46,47,48],[4,6,7,12,13,15,18,19,20,24,32,33,38,40,44,45,47,48],[3,5,7,10,12,15,18,19,22,23,25,26,27,30,32,34,35,38,39,40,41,42,43,44,45],[0,2,3,4,5,6,7,9,12,14,16,17,20,23,26,28,30,36,37,40,41,42,46,48,49],[1,6,7,14,16,17,18,23,32,34,35,36,37,43,47],[1,5,7,8,9,10,13,14,16,17,18,22,24,25,29,35,38,39,41,43,45,46,48,49],[0,2,4,7,8,12,15,18,19,23,24,27,29,30,32,36,37,40,43,46,49],[4,10,11,12,15,17,20,21,23,24,29,33,36,39,40,43,44,47,49],[0,2,4,7,8,9,13,14,19,21,24,26,27,33,35,36,37,39,40,42,44,45,47,48,49],[0,2,6,10,11,12,19,21,22,23,24,26,27,29,30,32,33,34,35,37,38,40,42,43,44,45,48,49],[1,6,10,11,12,14,18,20,22,23,24,26,31,38,39,42,43,44,45,48,49],[2,4,5,8,9,11,12,13,17,32,34,41,42,49],[1,4,5,6,8,9,13,15,16,23,24,25,28,31,35,38,41,43,44,45,49],[3,4,8,10,14,17,30,31,34,37,38,39,40,41,43,49],[1,3,5,14,15,16,27,31,33,37,39,41,46,49],[1,4,5,9,12,16,17,24,29,31,32,34,36,39,40,41,48],[0,3,9,10,11,13,14,16,17,19,26,28,30,32,33,37,44,46,47,49],[2,3,5,6,8,12,13,14,15,16,17,19,22,29,30,35,38,39,43,46,49],[0,1,5,6,9,12,19,27,28,31,32,33,34,35,38,40,43,44,47,48,49],[0,6,9,10,15,16,17,23,27,28,29,30,41,42,43,44,45,46,47],[2,3,6,7,9,13,15,16,21,25,26,28,35,39,41,42,44,45,46],[2,3,5,10,19,23,25,26,27,30,31,32,33,34,38,39,41,43,45,48],[0,1,2,3,5,12,13,14,16,22,24,26,31,32,33,34,35,40,43,44,47,48],[2,5,6,9,10,13,16,20,23,24,26,28,31,35,37,40,42,48,49],[0,4,6,17,19,20,21,22,25,28,29,30,32,33,34,40,41,42,44],[1,5,6,8,9,11,13,16,18,22,23,25,28,29,31,34,37,38,39,41,45,46],[1,2,4,5,7,8,14,15,16,21,23,25,28,29,31,37,40,43,49],[2,3,4,5,9,11,16,18,20,22,25,28,29,31,32,36,41,44,47,48],[0,2,3,5,9,11,12,15,16,19,24,25,27,29,30,36,37,38,39,41,43,45,47,48],[1,2,4,5,10,11,13,14,15,22,34,35,38,39,42,43,44,45,46,48,49],[0,1,2,6,10,11,13,15,16,20,21,23,30,32,33,35,39,42,44,48,49],[7,8,9,12,16,17,19,20,24,25,28,32,35,36,39,40,42,44,46,47,48],[0,2,3,6,9,12,14,15,17,20,21,22,24,27,28,32,35,36,37,38,44,45,49],[0,1,2,6,8,9,10,13,14,15,16,20,22,25,29,30,31,33,38,42,45,46,48,49],[9,10,12,18,19,20,21,22,26,27,28,31,32,34,35,44,47,48],[0,2,3,4,5,6,7,9,10,15,16,17,18,26,27,30,31,36,37,38,40,44,45,46,47,48,49],[2,3,5,9,11,12,13,14,16,17,19,20,24,25,26,28,29,33,35,36,46,47,48,49],[0,8,9,14,15,16,17,19,23,25,26,27,29,31,34,36,37,38,39,41,42,45,46,48],[0,2,8,9,12,15,16,17,19,26,27,28,32,35,36,39,40,42,44,46,49],[3,4,7,10,12,13,21,23,24,26,27,32,36,38,40,42,43,44,45,48],[0,1,2,3,7,8,11,14,15,23,25,26,29,34,35,38,41,42,43,49],[0,2,3,4,5,7,8,10,12,15,16,17,22,25,28,29,30,34,35,36,37,38,40,41,42,43,44,46,49],[0,3,4,10,12,13,14,15,16,17,18,19,20,21,23,24,25,30,33,36,37,39,40,42,43,45,47,48]]
    print(solution.catMouseGame(graph))
